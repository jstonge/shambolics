---
title: Survey results (early release)
subtitle: Preliminary results from a survey on the cost and benefits of learning to code
description: |
  The costs and benefits of learning to code in science vary across individuals and disciplines. We should have a better idea of these tradeoffs before selling anyone on coding.
categories:
  - Survey
  - Programming
date: today
author: Jonathan St-Onge
editor: visual
format: 
  html: 
    echo: false
    css: styles.css
image: soapboxing.jpg
---

```{r}
#| include: false
d <- readr::read_csv("data_clean.csv")
# View(d)
# d[,c("enough_instit_support", "enough_instit_support_ord")]
```


```{ojs read_data}
//| include: false
//| echo: false
pdata = FileAttachment("data_clean.csv").csv({ typed: true })

// useful vars
colnames = d3.sort(Object.keys(pdata[0]))
coders = pdata.filter(d => d.is_coder === 'coder')
non_coders = pdata.filter(d => d.is_coder === 'non coder')
coder_count = tidy(pdata, count("is_coder")).map(d => d.n)

// global filtering
filtered_dat = sel_dept == "" ? pdata : pdata.filter(d => d["dept_students_lab"] === sel_dept)
filtered_coders = sel_dept == "" ? coders : coders.filter(d => d["dept_students_lab"] === sel_dept)
```

```{ojs helpers}
//| include: false
//| echo: false
function plot_attr_h(dat, val_col, by_attr, col_legend) {
  return Plot.plot({
    marginLeft: 100,
    marginBottom: 50,
    height: 250,
    grid: true,
    color: col_legend === true ? { legend: by_attr ? true : false } : null,
    y: {
      label: do_pct ? " Frequency (%) ↑" : "# respondents ↑", 
      percent: do_pct ? true : false
      },
    x: {
      tickRotate: 10,
      label: "← more novices • more experience →",
      domain: d3.sort(dat, d => d[`${val_col}_c`]).map(d => d[val_col])
    },
    marks: [
      Plot.barY(
        rm_nulls ? dat.filter(d => d[val_col] !== null) : dat, 
        Plot.groupX({ y: do_pct ? "proportion" : "count" }, { 
            x: val_col,  fill: d => by_attr ? d[by_attr] : "grey"
          })
      )
    ]
  })
}

function plot_attr_v(dat, val_col, by_attr, col_legend , do_pct) {
    // data related
    const dat_no_nulls = dat.filter(d => d[val_col] !== null && d[by_attr] !== null)
    const dat_f = rm_nulls ? dat_no_nulls :  dat

    // marks
    const x = do_pct ? "proportion" : "count"
    const fill =  (d) => by_attr ? d[by_attr] : "grey"
    const mapping = Plot.barX(dat_f, Plot.groupY({ x: x }, { y: val_col, fill: fill }) ) 
    
    // labels
    const xlab = do_pct ? " Frequency (%) →" : "# respondents →"

    return Plot.plot({
      marginLeft: 255,
      grid: true,
      color: col_legend ? { legend: by_attr ? true : false } : null,
      y: { 
        label: "", 
        domain: /_ord/.test(val_col) ?  
          d3.sort(coders, d => d[val_col]).map(d => d[val_col]) :
          d3.sort(dat_f, d => d[`${val_col}_ord`]).map(d => d[`${val_col}`]) 
      },
      x: { label: xlab,  percent: do_pct ? true : false },
      marks: [ mapping ]
  })
}

function plot_yr_born(dat, by_attr) {
  const parseTime = d3.timeParse("%Y");
  const formatTime = d3.timeFormat("%Y")
  
  const ylab =  do_pct ? " Frequency (%) ↑" : "# respondents ↑"

  return Plot.plot({
    grid: true,
    height: 300,
    marginBottom: 35,
    x: { label: "",  tickRotate: 25, tickFormat: d => formatTime(parseTime(d)) },
    y: { label: ylab,  percent: do_pct ? true : false  },
    marks: [
      Plot.rectY(
        rm_nulls ? dat.filter(d => d["year_born"] !== null) : dat,
        Plot.binX({ y: do_pct ? "proportion" : "count" }, { 
          x: "year_born", r: 3, fill: d => by_attr ? d[by_attr] : "grey", 
          thresholds: 30
        })
      ),
      Plot.ruleY([0])
    ]
  })
}

function plot_duration(dat, by_attr) {
  return Plot.plot({
    grid: true,
    height: 300,
    x: {
      transform: d => d / 60, 
      label: "time(min)  →",
      domain: [0,d3.max(filtered_dat, d => (d["duration_sec"] / 60) + 2)]
    },
    y: { 
      label: do_pct ? " Frequency (%) ↑" : "# respondents ↑", 
      percent: do_pct ? true : false
    },
    marks: [
      Plot.rectY(
        rm_nulls ? dat.filter(d => d["duration_sec"] !== null && d[by_attr] !== null) : dat, 
        Plot.binX({ y: do_pct ? "proportion" : "count" }, {
          x: "duration_sec", fill: d => by_attr ? d[by_attr] : "grey", thresholds: 20,
          order: ["non coder", "coder"]
          })
      ),
      Plot.ruleY([0])
    ]
  })
}
```

We currently have \${pdata.length} valid responses, from \${tidy(pdata.filter(d =\> d\["dept_students_lab"\] !== ""), count("dept_students_lab")).length} different departments. There are \${coder_count\[0\]} coders and \${coder_count\[1\]} non-coders.

## Profiles

```{ojs profile}
viewof sel_dept = Inputs.select([''].concat(
  tidy(
    pdata.filter(d => d["dept_students_lab"] !== null),
    distinct('dept_students_lab')
  ).map(d => d["dept_students_lab"])), {label: "Choose dept"})

viewof do_pct = Inputs.toggle({label: "Show %"}) 
viewof rm_nulls = Inputs.toggle({label: "Remove nulls", value: true}) 
```

::: panel-tabset
## Demographics

```{ojs plot_demographics}
col_dems = ["is_coder", "gender_binary", "year_born", 
             "ethnicity_binary",  "dept_students_binary", "academia_status"]

viewof by_attr = Inputs.radio(col_dems, {label: "Attributes"})

html`<p class = 'q_styled'>Preferred Pronouns</p>`
plot_attr_v(filtered_dat, "pref_pronouns", by_attr, true,  do_pct)
html`<p class = 'q_styled'>Academia Status</p>`
plot_attr_v(filtered_dat, "academia_status", by_attr, false, do_pct)
html`<p class = 'q_styled'>Departments</p>`
plot_attr_v(filtered_dat, "dept_students_lab", by_attr, false, do_pct)
html`<p class = 'q_styled'>Year Born</p>`
plot_yr_born(filtered_dat, by_attr)
html`<p class = 'q_styled'>Duration (sec)</p>`
plot_duration(filtered_dat, by_attr)
```

## Dev Profiles

Only showing coders.

```{ojs dev_profile}
viewof by_attr2 = Inputs.radio(["gender_binary", "year_born", "ethnicity_binary", "dept_students_binary", "academia_status"], {label: "Attributes"})

// Do you consider yourself to be a coder/programmer?

plot_attr_v(filtered_coders, "self_id_as_coder", by_attr2, true, do_pct)

// "What OS"

plot_attr_v(filtered_coders, "what_os", by_attr2, false, do_pct)
```

**First line code**

```{ojs plot_first_line_coder}
plot_attr_h(filtered_coders, "first_line_code", by_attr2, false, "first line")
```

**Years coding**

```{ojs plot_yr_coding}
plot_attr_h(filtered_coders, "years_coding", by_attr2, false, "years coding")
```

## Tables

```{ojs table_1_options}
viewof form = Inputs.form({
  extra_filter: Inputs.checkbox(['coder', 'female', 'stem', 'Non-stem'], {label: 'Only'}), 
  dep_var: Inputs.select(colnames, {value: 'self_id_as_coder', label: 'Dep var (DV)'}),
  indep_var: Inputs.select(colnames, {value: 'gender_binary', label: 'Indep var (IV)'}), 
  do_pct_crosstab: Inputs.radio(['DV (→)', 'IV (↓)'], {label: "Show %", value: 'IV (↓)'})
})
```

```{ojs plot_table_1}
function crosstab_filter(x) {
    switch (x) {
      case "":         return pdata; 
      case 'coder':    return pdata.filter(d => d.is_coder === 'coder'); 
      case 'female':   return pdata.filter(d => d.gender_binary === 'female'); 
      case 'stem':     return pdata.filter(d => d.dept_students_binary === 'STEM'); 
      case 'Non-stem': return pdata.filter(d => d.dept_students_binary === 'Non-STEM'); 
      case 'coder,female': 
        return pdata.filter(d => d.is_coder === 'coder' && d.gender_binary === 'female');
      
      case 'coder,stem': 
        return pdata.filter(d => d.is_coder === 'coder' && d.dept_students_binary === 'STEM');
      
      case 'female,stem': 
        return pdata.filter(d => d.gender_binary === 'female' && d.dept_students_binary === 'STEM');
      
      case 'female,Non-stem': 
        return pdata.filter(d => d.gender_binary === 'female' && d.dept_students_binary === 'Non-STEM');
      
      case 'coder,Non-stem': 
        return pdata.filter(d => d.is_coder === 'coder' && d.dept_students_binary === 'Non-STEM');
      default:
        return pdata.filter(d => d.is_coder === "")
}}

crosstab_dat_filter1 = crosstab_filter(form.extra_filter.join(","))

crosstab_dat_filter2 = {
  if (rm_nulls) {
      return crosstab_dat_filter1.filter(d => d[form.dep_var] !== null && d[form.indep_var] !== null) 
  } else {
      return crosstab_dat_filter1
  }
}

crosstab_dat_long = tidy(
    crosstab_dat_filter2, 
    select([form.indep_var, form.dep_var]),
    count([form.indep_var, form.dep_var])
)

cols_ordered = [form.dep_var].concat(
  tidy(crosstab_dat_long, distinct(form.indep_var), arrange(form.indep_var)
  ).map(d => d[form.indep_var])
)

crosstab_dat_w_pct = tidy(
  crosstab_dat_long,
  groupBy(form.do_pct_crosstab == 'DV (→)' ? form.dep_var : form.indep_var, [
    mutateWithSummary({total: sum('n')})
  ]),
  mutate({ pct: d => (d.n / d.total)*100 }),
  select(['-n', '-total'])
)
```

Third variable: **\${form.extra_filter\[0\] === undefined ? "None": form.extra_filter.join(",")}**

Percentage data

```{ojs}
Inputs.table(tidy(
    crosstab_dat_w_pct,
    pivotWider({ namesFrom: form.indep_var, valuesFrom: 'pct' }),
    arrange(form.dep_var)
    ), { columns: cols_ordered })
```

Raw data

```{ojs}
Inputs.table(tidy(
  crosstab_dat_long, 
  pivotWider({ namesFrom: form.indep_var, valuesFrom: 'n' }),
  arrange(form.dep_var)
  ), { columns: cols_ordered }
)
```

```{ojs plot_notes}
function notes_crosstab(x) {
  switch (x) {
        case "self_id_as_coder ~ gender_binary":         
          return "It seems that female less affirmatively  self-identify as coders, whereas male are less ambiguous about it. When adding `stem`, male respond more affirmatvely to the question, but note that we have still a small sample. Is this something that holds when controlling for experience?"; 
        default:
          return ""
  }
}

notes = notes_crosstab(`${form.dep_var} ~ ${form.indep_var}`)
```

\${notes}

Notes:

-   There are **\${d3.sum(crosstab_dat_long, d=\> d.n)}** respondents shown in the table.
-   Does this crosstable passes the rule of five? <font color="red">\${String(crosstab_dat_long.map(d =\> d.n \> 5).every(v =\> v === true))}</font>

## Profile Data

```{ojs profile_data}
//| echo: false
profile_cols = ['academia_status', 'nb_advisors', 'dept_students_lab', "pref_pronouns", 
                "year_born", "ethnicity_binary", 'country_origin', 'us_state', 'reason_coding', 'how_did_you_learn_code','first_line_code', 'first_line_code_c','years_coding',  'freq_coding_proj', 'freq_coding_proj_c', 'freq_oss_proj', 'what_os', 'position_industry', 'use_lang']

Inputs.table(pdata, { columns: profile_cols })
```

## Questions

```{r show_question}
#| echo: false
source("lookups.R")
tibble::enframe(question2labs_lookup, name="Question", value="Label")  |>
  tidyr::unnest(cols = c(Label)) |>
  dplyr::arrange(Label) |>
  knitr::kable() |>
  kableExtra::kable_styling("striped", full_width = T) |>
  kableExtra::scroll_box(height = "500px")
```
:::

## Costs & benefits

```{ojs cost_and_benefits}
viewof sel_dept_cb = Inputs.select([''].concat(
  tidy(
    pdata.filter(d => d["dept_students_lab"] !== null),
    distinct('dept_students_lab')
  ).map(d => d["dept_students_lab"])), { label: "Choose dept" })

viewof by_attr_cb = Inputs.radio(["gender_binary", "year_born", "ethnicity_binary", "dept_students_binary", "academia_status"], { label: "Attributes" })
viewof do_pct_2 =   Inputs.toggle({ label: "Show %" }) 
viewof show_labs =   Inputs.toggle({ label: "Show Labels", value: true }) 
viewof rm_nulls_2 = Inputs.toggle({ label: "Remove nulls", value: true }) 
```

::: panel-tabset
## Costs

```{ojs plot_cost}
html`<p class = 'q_styled'>Do you think you have enough institutional support (workshops, mentorships, online labs) to learn to program?</p>`

plot_attr_v(coders, 
  show_labs ? "enough_instit_support" : "enough_instit_support_ord",      
  by_attr_cb, 
  true,  
  do_pct_2
)

html`<p class = 'q_styled'>Overall, would you like to have more time to improve your programming skills?</p>`

plot_attr_v(coders,   
  show_labs ? "more_time_learning_to_code": "more_time_learning_to_code_ord", 
  by_attr_cb, 
  false, 
  do_pct_2
)

html`<p class = 'q_styled'>For any of your current projects, do you consider that you spent too much time to code? (e.g. data cleaning, data visualization, gathering data, and so on)?</p>`

plot_attr_v(coders, 
 show_labs ? "self_expect_time_coding" : "self_expect_time_coding_ord", 
    by_attr_cb, 
    false,  
    do_pct_2
)
```

## Benefits

::: {.callout-note collapse="true"}
Depending on other variables, the answers to these questions can be interepreted both as relative costs or benefits, e.g. thinking that expected level of programming skills is important in your field is a cost when you are not skilled yet.
:::

```{ojs plot_benefits}
// "Value comp skills wrt domain"
html`<p class = 'q_styled'> Compared to your domain expertise, how valued do you think your coding skills are around you today?</p>`

plot_attr_v(coders, 
  show_labs ? "value_comp_skills_wrt_domain" : "value_comp_skills_wrt_domain_ord", 
  by_attr_cb, 
  false, 
  do_pct_2)
```

```{ojs plot_social_contact}
function plot_social_contacts(dat, by_attr) {
  return Plot.plot({
    grid: true,
    x: {
      label: "Social contact coding (%)  →",
    },
    y: { 
      label: do_pct_2 ? " Frequency (%) ↑" : "# respondents ↑", 
      percent: do_pct_2 ? true : false
    },
    marks: [
      Plot.barY(
        rm_nulls ? dat.filter(d => d["pct_social_contacts_coding"] !== null) : dat, 
        Plot.groupX({ y: do_pct_2 ? "proportion" : "count" }, { 
            x: "pct_social_contacts_coding",  fill: d => by_attr ? d[by_attr] : "grey"
          })
      ),
      Plot.ruleY([0])
    ]
  })
}

html`<p class = 'q_styled'> What percentage of your social contacts are likely to participate in a project that require programming in the upcoming academic year?</p>`

plot_social_contacts(coders, by_attr_cb)
```

## OSS

<!-- see https://observablehq.com/@observablehq/plot-facets?collection=@observablehq/plot for a nice facetted plot -->

```{ojs plot_attitude_open_source}
html`<p class = 'q_styled'>Do you share your code online?</p>`
plot_attr_v(coders, "do_share_code_online", by_attr_cb, true,  do_pct_2)

html`<h4>How important do you think the following items are in academia?</h4>`

html`<p class = 'q_styled'>Code associated with an article is citable.</p>`
plot_attr_v(coders, 
  show_labs ? "value_paper_code_citability" : "value_paper_code_citability_ord", 
  by_attr_cb, false, do_pct_2)
html`<p class = 'q_styled'>Code associated with an article is easy to find online</p>`
plot_attr_v(coders, 
  show_labs ? "value_accessibility_paper_code" : "value_accessibility_paper_code_ord", 
  by_attr_cb, false, do_pct_2)
html`<p class = 'q_styled'>Sharing code associated with an academic paper</p>`
plot_attr_v(coders, 
  show_labs ? "value_share_code" : "value_share_code_ord", 
  by_attr_cb, false, do_pct_2)
html`<p class = 'q_styled'>A welcoming community</p>`
plot_attr_v(coders, 
  show_labs ? "value_welcoming_community" : "value_welcoming_community_ord", 
  by_attr_cb, false, do_pct_2)
html`<p class = 'q_styled'>Widespread use</p>`
plot_attr_v(coders, 
  show_labs ? "value_widespread_use" : "value_widespread_use_ord", 
  by_attr_cb, false, do_pct_2)
```

#### Box plots

```{ojs}
agg_oss = tidy(
  coders, 
  select([startsWith("value"), "gender_binary"]),
  filter(d => d.gender_binary != null),
  pivotLonger({
    cols: ['-gender_binary'],
    namesTo: "catego",
    valuesTo: "val"
  }),
  filter(d => /_ord/.test(d.catego) && d.val != "NA" && d.val <= 5)
)

Plot.plot({
  height: 400,
  marginTop: 0,
  marginLeft: 250,
  x: { inset: 10, grid: true, label: "attitude →" },
  y: { axis: null, inset: 2},
  color: {legend: true},
  fy: {
    label: "questions (m) →",
    reverse: true
  },
  facet: {
    data: agg_oss,
    y: "catego",
    marginLeft: 250
  },
  marks: [
    Plot.frame({stroke: "#aaa", strokeWidth: 0.5}),
    Plot.boxX(agg_oss, {x: "val", y: "gender_binary", stroke: "gender_binary", r: 1})
  ]
})

```


## Data

```{ojs plot_table_2}
cost_cols = ['pct_social_contacts_coding', 'comp_skills_factors_pursue_academia',
             'comp_skills_pro_benefits_s', 'enough_instit_support',
             'friends_help', 'perceived_benefits_coding', 'first_adv_expect_time_coding',
             'second_adv_expect_time_coding', 'reason_coding',  'value_comp_skills_wrt_domain', 
             'do_share_code_online', "value_learn_code_in_field"]

Inputs.table(coders, { columns: cost_cols })
```
:::

## Students typical week

::: column-page
```{ojs plot_typical_week}
agg_dat = tidy(
  coders, 
  select([startsWith('time')]), 
  pivotLonger({
    cols: [startsWith('time')],
    namesTo: 'task',
    valuesTo: 'val'
  }),
  count(['task', 'val']
))


Plot.plot({
  width: 1000,
  marginBottom: 100,
  grid: true,
  x: {
    tickRotate: 45,
    label: "",
    domain: ['0 hour', '1-5 hours', '6-10 hours', '11-15 hours', null]
  },
  facet: {
    data: agg_dat,
    x: d => d.task.replace('time_', '')
  },
  marks: [
    Plot.barY(
      agg_dat,
      {x: "val", y: "n", fill: d => d.val === null ? 'grey' : 'task'}
    ),
    Plot.ruleY([0])
  ]
})
```
:::

## What do non-coders think about coding?

```{ojs non_coder_options}
viewof by_attr_nc = Inputs.radio(["gender_binary", "year_born", "ethnicity_binary", "dept_students_binary", "academia_status"], { label: "Attributes" })
viewof do_pct_nc =   Inputs.toggle({ label: "Show %", value: true }) 
viewof show_labs_nc =   Inputs.toggle({ label: "Show Labels", value: true })
```

```{ojs plot_non_coder_benefits}
html`<p class = 'q_styled'>Overall, how important do you think it is to learn programming in your academic field today?</p>`
plot_attr_v(non_coders, 
  show_labs_nc ? "value_learn_code_in_field" : "value_learn_code_in_field_ord",
  by_attr_nc, 
  true, 
  do_pct_nc)
```

```{ojs imports}
import { tidy, select, count, complete, filter, fullSeq, sum, mutateWithSummary, groupBy, pivotWider, startsWith, pivotLonger, mutate, distinct, summarize, arrange, pull } from '@pbeshai/tidyjs'
```


```{ojs}
html`<style>
.q_styled {
        position: relative; 
        top: 15px;
        font-size: 14px;
        font-family: sans-serif;
        text-align: center;
        font-style: italic
    }
</style>
`
```