[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "shambolics",
    "section": "",
    "text": "This model describes behaviors that require institutional strength to get off the ground. But as you add institutional levels to your collective, there is a cost. The model finds organizational free-riding, with some organizations preferring others to pay the cost of institutional strength while benefiting the behaviors emerging from those.\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n\nPreliminary results from a survey on the cost and benefits of learning to code\n\n\n\n\nSurvey\n\n\nProgramming\n\n\n\n\nThe costs and benefits of learning to code in science vary across individuals and disciplines. We should have a better idea of these tradeoffs before selling anyone on coding.\n\n\n\n\n\n\nNov 9, 2022\n\n\nJonathan St-Onge\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nCDAE\n\n\nInteractive\n\n\n\n\nStatistics is hard. Computational statistics makes it a bit better.\n\n\n\n\n\n\nNov 9, 2022\n\n\nJonathan St-Onge\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/survey-programming/index.html",
    "href": "posts/survey-programming/index.html",
    "title": "Survey results (early release)",
    "section": "",
    "text": "pdata = FileAttachment(\"data_clean.csv\").csv({ typed: true })\n\n// useful vars\ncolnames = d3.sort(Object.keys(pdata[0]))\ncoders = pdata.filter(d => d.is_coder === 'coder')\ncoder_count = tidy(pdata, count(\"is_coder\")).map(d => d.n)\n\n// global filtering\nfiltered_dat = sel_dept == \"\" ? pdata : pdata.filter(d => d[\"dept_students_lab\"] === sel_dept)\nfiltered_coders = sel_dept == \"\" ? coders : coders.filter(d => d[\"dept_students_lab\"] === sel_dept)\nWe currently have  valid responses, from  different departments. There are  coders and  non-coders."
  },
  {
    "objectID": "posts/survey-programming/index.html#profiles",
    "href": "posts/survey-programming/index.html#profiles",
    "title": "Survey results (early release)",
    "section": "Profiles",
    "text": "Profiles\n\nviewof sel_dept = Inputs.select([''].concat(\n  tidy(\n    pdata.filter(d => d[\"dept_students_lab\"] !== null),\n    distinct('dept_students_lab')\n  ).map(d => d[\"dept_students_lab\"])), {label: \"Choose dept\"})\n\nviewof do_pct = Inputs.toggle({label: \"Show %\"}) \nviewof rm_nulls = Inputs.toggle({label: \"Remove nulls\", value: true})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDemographicsDev ProfilesTablesProfile DataQuestions\n\n\n\ncol_dems = [\"is_coder\", \"pref_pronouns\", \"year_born\", \"ethnicity_binary\", \n            \"dept_students_binary\", \"academia_status\"]\n\nviewof by_attr = Inputs.radio(col_dems, {label: \"attributes\"})\n\nfunction plot_attr_v(dat, val_col, by_attr, col_legend, ylab, do_pct) {\n    return Plot.plot({\n      marginLeft: ylab === \"\" ? 175 : 90,\n      grid: true,\n      color: col_legend === true ? { legend: by_attr ? true : false } : null,\n      y: { label: ylab },\n      x: { \n        label: do_pct ? \" Frequency (%) →\" : \"# respondents →\", \n        percent: do_pct ? true : false\n      },\n      marks: [\n      Plot.barX(\n          rm_nulls ? dat.filter(d => d[val_col] !== null && d[by_attr] !== null) : dat,\n          Plot.groupY({ x: do_pct ? \"proportion\" : \"count\" }, { \n              y: val_col,  fill: d => by_attr ? d[by_attr] : \"grey\"\n          })\n        ),\n      ]\n  })\n}\n\nplot_attr_v(filtered_dat, \"pref_pronouns\", by_attr, true, \"\", do_pct)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot_attr_v(filtered_dat, \"academia_status\", by_attr, false, \"\", do_pct)\n\n\n\n\n\n\n\nplot_attr_v(filtered_dat, \"dept_students_lab\", by_attr, false, \"\", do_pct)\n\n\n\n\n\n\n\n\n\nYear born\n\nfunction plot_yr_born(dat, by_attr) {\n  const parseTime = d3.timeParse(\"%Y\");\n  const formatTime = d3.timeFormat(\"%Y\")\n  \n  return Plot.plot({\n    grid: true,\n    x: {\n      label: \"\", \n      tickRotate: 45,\n      tickFormat: d => formatTime(parseTime(d))\n      },\n    y: { \n      label: do_pct ? \" Frequency (%) ↑\" : \"# respondents ↑\", \n      percent: do_pct ? true : false\n      },\n    marks: [\n      Plot.rectY(\n        rm_nulls ? dat.filter(d => d[\"year_born\"] !== null) : dat,\n        Plot.binX({ y: do_pct ? \"proportion\" : \"count\" }, { \n          x: \"year_born\", r: 3, fill: d => by_attr ? d[by_attr] : \"grey\", \n          thresholds: 30, order: by_attr \n        })\n      ),\n      Plot.ruleY([0])\n    ]\n  })\n}\n\nplot_yr_born(filtered_dat, by_attr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDuration (sec)\n\nfunction plot_duration(dat, by_attr) {\n  return Plot.plot({\n    grid: true,\n    fy: {\n      label: \"\", \n    },\n    facet: { \n      data: rm_nulls ? dat.filter(d => d[\"duration_sec\"] !== null) : dat, \n      y: d => by_attr ? d[by_attr] : null,\n      marginRight: 130,\n      marginTop: 50,\n    },\n    x: { \n      transform: d => d / 60, \n      label: \"time(min)  →\",\n      domain: [0,d3.max(filtered_dat, d => (d[\"duration_sec\"] / 60) + 2)]\n    },\n    y: { \n      label: do_pct ? \" Frequency (%) ↑\" : \"# respondents ↑\", \n      percent: do_pct ? true : false\n    },\n    marks: [\n      Plot.rectY(\n        rm_nulls ? dat.filter(d => d[\"duration_sec\"] !== null && d[by_attr] !== null) : dat, \n        Plot.binX({ y: do_pct ? \"proportion\" : \"count\" }, {\n          x: \"duration_sec\", fill: d => by_attr ? d[by_attr] : \"grey\", thresholds: 20\n          })\n      ),\n      Plot.ruleY([0])\n    ]\n  })\n}\n\nplot_duration(filtered_dat, by_attr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOnly showing coders.\n\nviewof by_attr2 = Inputs.radio([\"pref_pronouns\", \"year_born\", \"ethnicity_binary\", \"dept_students_binary\", \"academia_status\"], {label: \"attributes\"})\n\nfunction plot_attr_h(dat, val_col, by_attr, col_legend) {\n  return Plot.plot({\n    marginLeft: 100,\n    marginBottom: 50,\n    height: 250,\n    grid: true,\n    color: col_legend === true ? { legend: by_attr ? true : false } : null,\n    y: {\n      label: do_pct ? \" Frequency (%) ↑\" : \"# respondents ↑\", \n      percent: do_pct ? true : false\n      },\n    x: {\n      tickRotate: 10,\n      label: \"← more novices • more experience →\",\n      domain: d3.sort(dat, d => d[`${val_col}_c`]).map(d => d[val_col])\n    },\n    marks: [\n      Plot.barY(\n        rm_nulls ? dat.filter(d => d[val_col] !== null) : dat, \n        Plot.groupX({ y: do_pct ? \"proportion\" : \"count\" }, { \n            x: val_col,  fill: d => by_attr ? d[by_attr] : \"grey\"\n          })\n      )\n    ]\n  })\n}\n\nplot_attr_v(filtered_coders, \"self_id_as_coder\", by_attr2, true, \"Self id as coder\", do_pct)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot_attr_v(filtered_coders, \"what_os\", by_attr2, false, \"What OS\", do_pct)\n\n\n\n\n\n\n\n\nFirst line code\n\nplot_attr_h(filtered_coders, \"first_line_code\", by_attr2, false, \"first line\")\n\n\n\n\n\n\nYears coding\n\nplot_attr_h(filtered_coders, \"years_coding\", by_attr2, false, \"years coding\")\n\n\n\n\n\n\n\n\n\nviewof form = Inputs.form({\n  extra_filter: Inputs.checkbox(['coder', 'female', 'stem', 'Non-stem'], {label: 'Only'}), \n  dep_var: Inputs.select(colnames, {value: 'self_id_as_coder', label: 'Dep var (DV)'}),\n  indep_var: Inputs.select(colnames, {value: 'gender_binary', label: 'Indep var (IV)'}), \n  do_pct_crosstab: Inputs.radio(['DV (→)', 'IV (↓)'], {label: \"Show %\", value: 'IV (↓)'})\n})\n\nfunction crosstab_filter(x) {\n    switch (x) {\n      case \"\":         return pdata; \n      case 'coder':    return pdata.filter(d => d.is_coder === 'coder'); \n      case 'female':   return pdata.filter(d => d.gender_binary === 'female'); \n      case 'stem':     return pdata.filter(d => d.dept_students_binary === 'STEM'); \n      case 'Non-stem': return pdata.filter(d => d.dept_students_binary === 'Non-STEM'); \n      case 'coder,female': \n        return pdata.filter(d => d.is_coder === 'coder' && d.gender_binary === 'female');\n      \n      case 'coder,stem': \n        return pdata.filter(d => d.is_coder === 'coder' && d.dept_students_binary === 'STEM');\n      \n      case 'female,stem': \n        return pdata.filter(d => d.gender_binary === 'female' && d.dept_students_binary === 'STEM');\n      \n      case 'female,Non-stem': \n        return pdata.filter(d => d.gender_binary === 'female' && d.dept_students_binary === 'Non-STEM');\n      \n      case 'coder,Non-stem': \n        return pdata.filter(d => d.is_coder === 'coder' && d.dept_students_binary === 'Non-STEM');\n      default:\n        return pdata.filter(d => d.is_coder === \"\")\n}}\n\ncrosstab_dat_filter1 = crosstab_filter(form.extra_filter.join(\",\"))\n\ncrosstab_dat_filter2 = {\n    if (rm_nulls) {\n      return crosstab_dat_filter1.filter(d => d[form.dep_var] !== null && d[form.indep_var] !== null) \n  } else {\n      return crosstab_dat_filter1\n  }\n}\n\ncrosstab_dat_long = tidy(\n    crosstab_dat_filter2, \n    select([form.indep_var, form.dep_var]),\n    count([form.indep_var, form.dep_var])\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThird variable: \nPercentage data\n\ncrosstab_dat_w_pct = tidy(\n  crosstab_dat_long,\n  groupBy(form.do_pct_crosstab == 'DV (→)' ? form.dep_var : form.indep_var, [\n    mutateWithSummary({total: sum('n')})\n  ]),\n  mutate({ pct: d => (d.n / d.total)*100 }),\n  select(['-n', '-total'])\n)\n\nInputs.table(\n  tidy(\n    crosstab_dat_w_pct,\n      pivotWider({\n        namesFrom: form.indep_var,\n        valuesFrom: 'pct'\n      })\n))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRaw data\n\nInputs.table(tidy(\n  crosstab_dat_long, \n  pivotWider({\n        namesFrom: form.indep_var,\n        valuesFrom: 'n'\n      }))\n)\n\n\n\n\n\n\nNote: There are  respondents shown in the table.\n\n\n\nInputs.table(tidy(pdata, select(['academia_status', 'nb_advisors', 'dept_students_lab', \"pref_pronouns\", \"year_born\", \"ethnicity_binary\", 'country_origin', 'us_state', 'reason_coding', 'how_did_you_learn_code','first_line_code', 'first_line_code_c', 'years_coding',  'freq_coding_proj', 'freq_coding_proj_c', 'freq_oss_proj', 'what_os', 'position_industry', 'use_lang'])))\n\n\n\n\n\n\n\n\n\n\n\n\n \n  \n    Question \n    Label \n  \n \n\n  \n    What is your academic status? \n    academia_status \n  \n  \n    Do you agree to the above terms? \n    agree_term \n  \n  \n    Q_RecaptchaScore \n    captcha_score \n  \n  \n    When using other people's code, how do you cite their library/repository? \n    cite_code \n  \n  \n    When using other people's data, do you cite their library/repository? How? \n    cite_data \n  \n  \n    How likely you think that not knowing how to program will have an impact on future professional opportunities? \n    coding_on_future_opportunities \n  \n  \n    If you have any suggestions/comments about the survey, please share them below! \n    comments \n  \n  \n    Now, thinking about the expectations in your field: would you say that the expected level of programming skills in your field is an important factor in your choice to pursue an academic career? \n    comp_skills_factors_pursue_academia \n  \n  \n    How important do you think your programming skills were for your career? \n    comp_skills_pro_benefits_p \n  \n  \n    Do you think programming will bring you professional benefits in the future? \n    comp_skills_pro_benefits_s \n  \n  \n    How important do you think your programming skills are to prospective group members? \n    comp_skills_recruiting \n  \n  \n    How important programming skills are when hiring new group members? - Graduate students \n    comp_skills_recruiting_grad \n  \n  \n    How important programming skills are when hiring new group members? - Postdoctoral researchers \n    comp_skills_recruiting_postdoc \n  \n  \n    How important programming skills are when hiring new group members? - Undergraduate students \n    comp_skills_recruiting_undergrad \n  \n  \n    List of Countries \n    country_origin \n  \n  \n    What is your department? Please select all that apply. \n    dept_prof \n  \n  \n    What is your program? \n    dept_students \n  \n  \n    Do you feel disadvantaged for not knowing how to code? \n    disadv_not_coding \n  \n  \n    Distribution Channel \n    distribution_channel \n  \n  \n    If you wish to delete your survey entry write \"delete\" below \n    do_del \n  \n  \n    Do you share your code online? \n    do_share_code_online \n  \n  \n    Duration (in seconds) \n    duration_sec \n  \n  \n    What is your institutional email address? \n    email \n  \n  \n    End Date \n    end_survey \n  \n  \n    Do you think you have enough institutional support (workshops, mentorships, online labs) to learn to program? \n    enough_instit_support \n  \n  \n    Which categories best describe you? \n    ethnicity \n  \n  \n    At what age did you write your first line of code or program? (e.g., webpage, Hello World, Scratch project) \n    first_line_code \n  \n  \n    When you are working on projects (for school, work, fun)  how often  do you code? \n    freq_coding_proj \n  \n  \n    How much of the software that you use is open source? (please provide your best guess) \n    freq_oss_proj \n  \n  \n    Do you feel you have friends, colleagues, or supervisors who can help with your coding issues? \n    friends_help \n  \n  \n    How did you first learn to code? \n    how_did_you_learn_code \n  \n  \n    Finished \n    is_finished \n  \n  \n    Overall, would you like to have more time to improve your programming skills? \n    more_time_learning_to_code \n  \n  \n    What is the name of your research group? \n    name_research_group \n  \n  \n    How many advisors do you have? \n    nb_advisors \n  \n  \n    What percentage of your social contacts are likely to participate in a project that require programming in the upcoming academic year. Social contacts are classmates and other peers that you have communicated with at least briefly within the last month, either face-to-face, or otherwise. - Click to write Choice 1 \n    pct_social_contacts_coding \n  \n  \n    What benefits do you see in programming? \n    perceived_benefits_coding \n  \n  \n    Which of the following describes industry positions you have held or currently hold? \n    position_industry \n  \n  \n    What is your preferred pronouns? \n    pref_pronouns \n  \n  \n    Progress \n    progress \n  \n  \n    What qualities do you most value in software ? \n    qualities_oss \n  \n  \n    How often do you read programming books, either to improve your long-term coding skills or out of interest? \n    read_prog_book \n  \n  \n    Do you code for any of the following reasons? \n    reason_coding \n  \n  \n    Recorded Date \n    record_date \n  \n  \n    Response ID \n    response_id \n  \n  \n    Response Type \n    response_type \n  \n  \n    Score \n    score \n  \n  \n    For any of your current projects, do you consider that you spent too much time to code? (e.g. data cleaning, data visualization, gathering data, and so on)? \n    self_expect_time_coding \n  \n  \n    Do you consider yourself to be a coder/programmer? \n    self_id_as_coder \n  \n  \n    Start Date \n    start_survey \n  \n  \n    Coursework aside, how many hours you typically spend on the following tasks in a given week? (please provide your best guess) - Cleaning code (debugging, refactoring, renaming variables, etc.) \n    time_cleaning_code \n  \n  \n    Coursework aside, how many hours you typically spend on the following tasks in a given week? (please provide your best guess) - Data cleaning (manually, e.g. using excel) \n    time_data_clean_gui \n  \n  \n    Coursework aside, how many hours you typically spend on the following tasks in a given week? (please provide your best guess) - Data cleaning (programmatically) \n    time_data_clean_prog \n  \n  \n    Coursework aside, how many hours you typically spend on the following tasks in a given week? (please provide your best guess) - Digital data collection (e.g. web scraping) \n    time_digital_data_coll \n  \n  \n    Coursework aside, how many hours you typically spend on the following tasks in a given week? (please provide your best guess) - Experimental manipulation \n    time_exp_manip \n  \n  \n    Coursework aside, how many hours you typically spend on the following tasks in a given week? (please provide your best guess) - Field data collection (e.g. interviews, surveys, questionnaires, observations, ethnographies, etc) \n    time_field_data_coll \n  \n  \n    Coursework aside, how many hours you typically spend on the following tasks in a given week? (please provide your best guess) - Grant writing \n    time_grant_writing \n  \n  \n    Coursework aside, how many hours you typically spend on the following tasks in a given week? (please provide your best guess) - Literature review \n    time_lit_review \n  \n  \n    Coursework aside, how many hours you typically spend on the following tasks in a given week? (please provide your best guess) - Meetings \n    time_meeting \n  \n  \n    Coursework aside, how many hours you typically spend on the following tasks in a given week? (please provide your best guess) - Writing thesis/paper \n    time_paper_writing \n  \n  \n    Coursework aside, how many hours you typically spend on the following tasks in a given week? (please provide your best guess) - Reading software-related content (blogs, books, forums, documentation) \n    time_read_doc \n  \n  \n    Do you consider yourself a member of an underrepresented group? \n    underrep_group \n  \n  \n    50 States, D.C. and Puerto Rico \n    us_state \n  \n  \n    Which programming languages, scripting, and markup languages have you worked in over the past year? \n    use_lang \n  \n  \n    User Language \n    user_lang \n  \n  \n    How important do you think the following items are in academia? - Code associated with an article is easy to find online \n    value_accessibility_paper_code \n  \n  \n    When thinking about whether to use open source software, how important are the following: - Active development \n    value_active \n  \n  \n    When thinking about whether to use open source software, how important are the following: - A contributor's license agreement (CLA) \n    value_cla \n  \n  \n    When thinking about whether to use open source software, how important are the following: - A code of conduct \n    value_coc \n  \n  \n    Compared to your domain expertise, how valued do you think your coding skills are around you today? \n    value_comp_skills_wrt_domain \n  \n  \n    When thinking about whether to use open source software, how important are the following: - A contributing guide \n    value_contrib_guide \n  \n  \n    Overall, how important do you think it is to learn programming in your academic field today? \n    value_learn_code_in_field \n  \n  \n    When thinking about whether to use open source software, how important are the following: - An open source license \n    value_oss_license \n  \n  \n    How important do you think the following items are in academia? - Code associated with an article is citable. \n    value_paper_code_citability \n  \n  \n    When thinking about whether to use open source software, how important are the following: - Responsive maintainers \n    value_responsive_maintainers \n  \n  \n    How important do you think the following items are in academia? - Sharing code associated with an academic paper \n    value_share_code \n  \n  \n    When thinking about whether to use open source software, how important are the following: - A welcoming community \n    value_welcoming_community \n  \n  \n    When thinking about whether to use open source software, how important are the following: - Widespread use \n    value_widespread_use \n  \n  \n    What is the primary operating system in which you work? \n    what_os \n  \n  \n    If you want to learn to program, what's stopping you? \n    why_not_coding \n  \n  \n    In what year were you born? \n    year_born \n  \n  \n    How many years have you been coding? \n    years_coding"
  },
  {
    "objectID": "posts/survey-programming/index.html#students-typical-week",
    "href": "posts/survey-programming/index.html#students-typical-week",
    "title": "Survey results (early release)",
    "section": "Students typical week",
    "text": "Students typical week\n\n\nagg_dat = tidy(\n  coders, \n  select([startsWith('time')]), \n  pivotLonger({\n    cols: [startsWith('time')],\n    namesTo: 'task',\n    valuesTo: 'val'\n  }),\n  count(['task', 'val']\n))\n\n\nPlot.plot({\n  width: 1000,\n  marginBottom: 100,\n  grid: true,\n  x: {\n    tickRotate: 45,\n    label: \"\",\n    domain: ['0 hour', '1-5 hours', '6-10 hours', '11-15 hours', null]\n  },\n  facet: {\n    data: agg_dat,\n    x: d => d.task.replace('time_', '')\n  },\n  marks: [\n    Plot.barY(\n      agg_dat,\n      {x: \"val\", y: \"n\", fill: d => d.val === null ? 'grey' : 'task'}\n    ),\n    Plot.ruleY([0])\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { tidy, select, count, complete, filter, fullSeq, sum, mutateWithSummary, \n         groupBy, pivotWider, startsWith, pivotLonger, mutate, distinct, summarize } from '@pbeshai/tidyjs'"
  },
  {
    "objectID": "posts/source-sink/index.html",
    "href": "posts/source-sink/index.html",
    "title": "Source-sink behavioural dynamics limit institutional evolution in a group structured society",
    "section": "",
    "text": "The key ingredients of the model are our groups \\(G\\) with the number of adopters \\(i\\) and with an institution of level \\(\\ell\\). We assume that with higher levels of institutional strength, \\(\\ell\\), the institution will more effectively promote group-beneficial behavior, \\(\\ell\\beta\\). But this is offset by a cost, \\(c\\), of entertaining larger groups. For instance, think of the process of unionization, promoting behaviors that are costly at individual level. When unionization becomes more successful, the unions can become ungaingly.\nFirst master equation:\n\\[\\begin{align*}\n\\frac{d}{dt}G_{i,\\ell}^{diff} &= \\ell \\beta [(i-1) + R](n - i + 1)G_{i-1,\\ell} \\\\\n                              &- \\ell \\beta (i+R)(n-i) G_{i,\\ell} \\\\\n                              &+ \\gamma(i+1)G_{i+1,\\ell} - \\gamma i G_{i,\\ell}\n\\end{align*}\\]\nwhere \\(R = \\mathbin{\\color{red}{\\rho}} \\sum_{i',\\ell'} i'G_{i',\\ell'}\\) represents the global diffusion of behaviors and primes denote variable over which we sum to calculate global quantity. The sum over adopters at each level weighted by global behavioural diffusion \\(\\rho\\).\nSecond master equation:\n\\[\\begin{align*}\n\\frac{d}{dt}G_{i,\\ell}^{select} &= \\mathbin{\\color{red}{\\rho}} [G_{i,\\ell-1}(Z_\\ell Z_{\\ell-1}^{-1} + \\mathbin{\\color{midnightblue}{\\mu}}) + G_{i,\\ell+1}(Z\\ell Z_{\\ell + 1}^{-1} + \\mathbin{\\color{midnightblue}{\\mu}})] \\\\\n                                &-\\mathbin{\\color{red}{\\rho}}(Z_{\\ell-1}Z_\\ell^{-1} + Z_{\\ell+1}^{-1} + 2\\mathbin{\\color{midnightblue}{\\mu}})G_{i,\\ell}\n\\end{align*}\\]\nwhere \\(Z_\\ell = \\frac{\\sum_{i'} exp(bi'-c\\ell)G_{i',\\ell}}{\\sum_{i'}G_{i',\\ell}}\\). Note that we add a constant rate of transition \\(\\mu\\) to the selection proces.\nTaken togetherm we have the set of master equations:\n\\[\n\\frac{d}{dt}G_{i,\\ell} = \\frac{d}{dt}G_{i,\\ell}^{diff} + \\frac{d}{dt}G_{i,\\ell}^{select}\n\\]"
  },
  {
    "objectID": "posts/source-sink/index.html#julia-model",
    "href": "posts/source-sink/index.html#julia-model",
    "title": "Source-sink behavioural dynamics limit institutional evolution in a group structured society",
    "section": "Julia model",
    "text": "Julia model\nfunction source_sink!(du, u, p, t)\n    G, L, n = u, length(u.x), length(first(u.x))\n    β, γ, ρ, b, c, μ = p\n    Z, pop, R = zeros(L), zeros(L), 0.\n\n    # Calculate mean-field coupling and observed fitness landscape\n    for ℓ in 1:L\n      n_adopt = collect(0:(n-1))\n      Z[ℓ]    = sum(exp.(b*n_adopt .- c*(ℓ-1)) .* G.x[ℓ])\n      pop[ℓ]  = sum(G.x[ℓ])\n      R       += sum(ρ*n_adopt .* G.x[ℓ])\n      pop[ℓ] > 0.0 && ( Z[ℓ] /= pop[ℓ] )\n    end\n\n    for ℓ = 1:L, i = 1:n\n      n_adopt, gr_size = i-1, n-1\n\n      # Diffusion events\n      du.x[ℓ][i] = -γ*n_adopt*G.x[ℓ][i] - (ℓ-1)*β*(n_adopt+R)*(gr_size-n_adopt)*G.x[ℓ][i]\n\n      n_adopt > 0 && ( du.x[ℓ][i] += β*(ℓ-1)*(n_adopt-1+R)*(gr_size-n_adopt+1)*G.x[ℓ][i-1])\n      n_adopt < gr_size && ( du.x[ℓ][i] +=  γ*(n_adopt+1)*G.x[ℓ][i+1] )\n\n      # Group selection process\n      ℓ > 1 && ( du.x[ℓ][i] += ρ*G.x[ℓ-1][i]*(Z[ℓ] / Z[ℓ-1] + μ) - ρ*G.x[ℓ][i]*(Z[ℓ-1] / Z[ℓ]+μ) )\n      ℓ < L && ( du.x[ℓ][i] += ρ*G.x[ℓ+1][i]*(Z[ℓ] / Z[ℓ+1] + μ) - ρ*G.x[ℓ][i]*(Z[ℓ+1] / Z[ℓ]+μ) )\n    end\nend"
  },
  {
    "objectID": "posts/source-sink/index.html#output",
    "href": "posts/source-sink/index.html#output",
    "title": "Source-sink behavioural dynamics limit institutional evolution in a group structured society",
    "section": "Output",
    "text": "Output\n\ndata = FileAttachment(\"data.json\").json()\np = Object.keys(data).map(d => d.split(\"_\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nminmax = (p, i) => d3.extent(p.map(d => parseFloat(d[i])))\n\nviewof beta  = Inputs.range(minmax(p,0), {step: 0.05, label: \"β\", value:\"0.07\"})\nviewof gamma = Inputs.range(minmax(p,1), {step: 0.03, label: \"γ\", value:\"1.0\"})\nviewof rho   = Inputs.range(minmax(p,2), {step: 0.15,label: \"ρ\", value:\"0.1\"})\nviewof b     = Inputs.range(minmax(p,3), {step: 0.05, label: \"b\", value:\"0.18\"})\nviewof c     = Inputs.range(minmax(p,4), {step: 0.5, label: \"c\", value:\"1.05\"})\nviewof mu    = Inputs.range(minmax(p,5), {step: 0.03, label: \"μ\", value:\"0.0001\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot\n\n\n\nf = (x) => Number.isInteger(x) ? x.toPrecision(2) : x\n\nPlot.plot({\n  x: {type:\"log\"},\n  y: {domain: [0,1]},\n  color: {scheme: \"reds\", type: \"ordinal\", legend: true},\n  marks: [\n    Plot.dot(\n      data[`${f(beta)}_${f(gamma)}_${f(rho)}_${f(b)}_${f(c)}_${f(mu)}`], {\n        x: 'timesteps', y: \"value\", stroke: \"L\"\n        })\n  ]\n})"
  },
  {
    "objectID": "posts/source-sink/index.html#takeaways",
    "href": "posts/source-sink/index.html#takeaways",
    "title": "Source-sink behavioural dynamics limit institutional evolution in a group structured society",
    "section": "Takeaways:",
    "text": "Takeaways:\n\nFrequency of behaviour in groups with different institutional strength.\nWithin groups, the frequency of cooperative behaviour follows the strength of institutions (with ℓ = 1 in light beige and ℓ = 6 in dark red).\nQualitatively, no institutions are possible if institutional costs are too high, and the behaviour never spreads.\nThe time dynamics of global behavioural frequency and behaviour in groups can include patterns of surge and collapse."
  },
  {
    "objectID": "posts/interactive-stats/index.html",
    "href": "posts/interactive-stats/index.html",
    "title": "CDAE stats",
    "section": "",
    "text": "The equation:\n\\[n^* = \\frac{n_0}{1 + \\frac{n_0}{N}}\\]\nwhere \\(n_0 = z_\\alpha^2 \\frac{S^2}{D^2}\\), \\(S^2\\) is our population variance, \\(D^2\\) is the difference between the true value and the estimated value, and \\(z_\\alpha^2\\) is the \\(z\\) value at a given confidence interval.1\n\n\n\nWe know…\n\nThere are 5,000 nonprofits in the city of reference\nFrom a previous study, we know that the the mean value of using new tools is $3,000. We also know from previous studies that the s.d. of this is $3,500.\n\nWe want…\n\nAn error rate of 10%\nA confidence interval of 95%\n\n\n\nfunction calc_n_0(z_alpha_sq, S, D) {\n    return z_alpha_sq * (S**2 / D**2)\n}\n\nfunction effective_sample_size(z_alpha_sq, S, D, N) {\n    const n_0 = calc_n_0(z_alpha_sq, S, D)\n    return +(n_0 / (1 + (n_0 / N))).toFixed(1)\n}\n\nfunction ci2z(ci) {\n     if (ci === \".68\") {\n        return 1\n     } else if (ci === \".95\") {\n        return 2\n     } else if (ci === \".99\") {\n        return 3\n     }\n}\n\nviewof conf_int = Inputs.radio([\".68\", \".95\", \".99\"], {value: \".95\", label: \"Conf. interval\"})\nviewof error_rate = Inputs.range([0.05, 1], {value: 0.1, step: 0.05, label: \"Error rate\"})\nviewof N = Inputs.range([0, 100000], {value: 5000, step: 1000, label: \"N\"})\nviewof prev_mean = Inputs.range([0, 10000], {value: 3000, step: 500, label: \"Prev mean\"})\nviewof prev_std = Inputs.range([0, 10000], {value: 3500, step: 500, label: \"Prev std\"})\nz_alpha_sq = ci2z(conf_int)**2\n\nS = prev_std\nD = error_rate * prev_mean\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere, \\(S^2\\) is the previous standard deviation squared and \\(D\\) is the wanted error rate times the previous mean, that is,  x  = .\nWe find that the minimum adequate sample size, or \\(n^*\\):\n\\(n^0\\) = \n\\(n^*\\) =  / (1 +  / ) = \n\\(n_0/N\\) = \nAlso, we saw in class that \\(n^*\\) converges around \\(600\\), with the default parameters. That is, adding more data does not entail a higher \\(n^*\\). You can observe that fact with the following plot:\n\nxs = [...Array(N).keys()];\nys = xs.map(x => effective_sample_size(z_alpha_sq, S, D, x))\nPlot.lineY(ys).plot({height: 200, width: 300, y: {label: \"↑ n*\"}, x: {label: \"N →\"}})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBut you can play around with other settings to see how it varies."
  },
  {
    "objectID": "posts/interactive-stats/index.html#power-analysis",
    "href": "posts/interactive-stats/index.html#power-analysis",
    "title": "CDAE stats",
    "section": "Power analysis",
    "text": "Power analysis\nSee Patrick Mineault notebook"
  },
  {
    "objectID": "posts/survey-programming/index.html#profiles-1",
    "href": "posts/survey-programming/index.html#profiles-1",
    "title": "Survey results (early release)",
    "section": "Profiles",
    "text": "Profiles\n\nviewof do_pct_2 = Inputs.toggle({label: \"Show %\"}) \nviewof rm_nulls_2 = Inputs.toggle({label: \"Remove nulls\", value: true})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCosts\n\n\n\npdata['friends_help']"
  },
  {
    "objectID": "posts/survey-programming/index.html#costs-benefits",
    "href": "posts/survey-programming/index.html#costs-benefits",
    "title": "Survey results (early release)",
    "section": "Costs & benefits",
    "text": "Costs & benefits\n\nviewof sel_dept_cb = Inputs.select([''].concat(\n  tidy(\n    pdata.filter(d => d[\"dept_students_lab\"] !== null),\n    distinct('dept_students_lab')\n  ).map(d => d[\"dept_students_lab\"])), {label: \"Choose dept\"})\n\nviewof by_attr_cb = Inputs.radio([\"pref_pronouns\", \"year_born\", \"ethnicity_binary\", \"dept_students_binary\", \"academia_status\"], {label: \"attributes\"})\n\nviewof do_pct_2 = Inputs.toggle({label: \"Show %\"}) \nviewof rm_nulls_2 = Inputs.toggle({label: \"Remove nulls\", value: true})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCostsBenefitsOSSData\n\n\nSmaller values are more negative attitude.\n\nplot_attr_v(coders, \"enough_instit_support_ord\", by_attr_cb, true, \n\"Institutional support\", do_pct_2)\n\n\n\n\n\n\n\nplot_attr_v(coders, \"more_time_learning_to_code_ord\", by_attr_cb, false, \"More time learning to code\", do_pct_2)\n\n\n\n\n\n\n\nplot_attr_v(coders, \"self_expect_time_coding_ord\", by_attr_cb, false, \"Self expectation time coding\", do_pct_2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nDepending on other variables, the answers to these questions can be interepreted both as relative costs or benefits, e.g. thinking that expected level of programming skills is important in your field is a cost when you are not skilled yet.\n\n\n\n\nplot_attr_v(coders, \"value_learn_code_in_field_ord\", by_attr_cb, true, \"Coding on future opportunities\", do_pct_2)\n\n\n\n\n\n\n\nplot_attr_v(coders, \"value_comp_skills_wrt_domain_ord\", by_attr_cb, false, \"Value comp skills wrt domain\", do_pct_2)\n\n\n\n\n\n\n\n\n\nfunction plot_social_contacts(dat, by_attr) {\n  return Plot.plot({\n    grid: true,\n    x: {\n      label: \"Social contact coding (%)  →\",\n    },\n    y: { \n      label: do_pct_2 ? \" Frequency (%) ↑\" : \"# respondents ↑\", \n      percent: do_pct_2 ? true : false\n    },\n    marks: [\n      Plot.barY(\n        rm_nulls ? dat.filter(d => d[\"pct_social_contacts_coding\"] !== null) : dat, \n        Plot.groupX({ y: do_pct_2 ? \"proportion\" : \"count\" }, { \n            x: \"pct_social_contacts_coding\",  fill: d => by_attr ? d[by_attr] : \"grey\"\n          })\n      ),\n      Plot.ruleY([0])\n    ]\n  })\n}\n\nplot_social_contacts(coders, by_attr_cb)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot_attr_v(coders, \"do_share_code_online\", by_attr_cb, true, \"\", do_pct_2)\n\n\n\n\n\n\n\nplot_attr_v(coders, \"value_comp_skills_wrt_domain\", by_attr_cb, false, \"\", do_pct_2)\n\n\n\n\n\n\n\nplot_attr_v(coders, \"value_accessibility_paper_code\", by_attr_cb, false, \"\", do_pct_2)\n\n\n\n\n\n\n\nplot_attr_v(coders, \"value_paper_code_citability\", by_attr_cb, false, \"\", do_pct_2)\n\n\n\n\n\n\n\nplot_attr_v(coders, \"value_share_code\", by_attr_cb, false, \"\", do_pct_2)\n\n\n\n\n\n\n\nplot_attr_v(coders, \"value_welcoming_community_ord\", by_attr_cb, false, \"Welcoming community\", do_pct_2)\n\n\n\n\n\n\n\n\n\n\n\ncost_cols = ['pct_social_contacts_coding', 'comp_skills_factors_pursue_academia',\n'comp_skills_pro_benefits_s', 'enough_instit_support',\n'friends_help', 'perceived_benefits_coding', 'first_adv_expect_time_coding',\n'second_adv_expect_time_coding', 'reason_coding',  'value_comp_skills_wrt_domain', 'do_share_code_online', \"value_learn_code_in_field\"]\n\nInputs.table(tidy(coders, select(cost_cols)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { tidy, select, count, complete, filter, fullSeq, sum, mutateWithSummary, \n         groupBy, pivotWider, startsWith, pivotLonger, mutate, distinct, summarize } from '@pbeshai/tidyjs'"
  },
  {
    "objectID": "posts/source-sink/interactive.html",
    "href": "posts/source-sink/interactive.html",
    "title": "shambolics",
    "section": "",
    "text": "function initialize_u0(;n::Int=20, L::Int=6, M::Int=20, p::Float64=0.01)\n    G = zeros(L, n+1)\n  \n    for _ in 1:M\n      ℓ = rand(1:L) # pick a level\n      i = sum(collect(rand(Binomial(1, p), n))[1]) # how many total adopters?\n      G[ℓ, i+1] += 1 # everytime combination G[ℓ,i], count +1\n    end\n  \n    G = G ./ M # normalized by tot number of groups\n  \n    # !TODO: find better way to flatten matrix.\n    @assert L == 6 \"Number of lvl must equal 6 for now\"\n    G = ArrayPartition(G[1,:], G[2,:], G[3,:], G[4,:], G[5,:], G[6,:])\n  \n    return G\n  end\n\n\nfunction source_sink!(du, u, p, t)\n    G, L, n = u, length(u.x), length(first(u.x))\n    β, γ, ρ, b, c, μ = p\n    Z, pop, R = zeros(L), zeros(L), 0.\n\n    # Calculate mean-field coupling and observed fitness landscape\n    for ℓ in 1:L\n      n_adopt = collect(0:(n-1))\n      Z[ℓ]    = sum(exp.(b*n_adopt .- c*(ℓ-1)) .* G.x[ℓ])\n      pop[ℓ]  = sum(G.x[ℓ])\n      R      += sum(ρ*n_adopt .* G.x[ℓ])\n      pop[ℓ] > 0.0 && ( Z[ℓ] /= pop[ℓ] )\n    end\n\n\n    for ℓ = 1:L, i = 1:n\n      n_adopt, gr_size = i-1, n-1\n\n      # Diffusion events\n      du.x[ℓ][i] = -γ*n_adopt*G.x[ℓ][i] - (ℓ-1)*β*(n_adopt+R)*(gr_size-n_adopt)*G.x[ℓ][i]\n\n      n_adopt > 0 && ( du.x[ℓ][i] += β*(ℓ-1)*(n_adopt-1+R)*(gr_size-n_adopt+1)*G.x[ℓ][i-1])\n      n_adopt < gr_size && ( du.x[ℓ][i] +=  γ*(n_adopt+1)*G.x[ℓ][i+1] )\n\n      # Group selection process\n      ℓ > 1 && ( du.x[ℓ][i] += ρ*G.x[ℓ-1][i]*(Z[ℓ] / Z[ℓ-1] + μ) - ρ*G.x[ℓ][i]*(Z[ℓ-1] / Z[ℓ]+μ) )\n      ℓ < L && ( du.x[ℓ][i] += ρ*G.x[ℓ+1][i]*(Z[ℓ] / Z[ℓ+1] + μ) - ρ*G.x[ℓ][i]*(Z[ℓ+1] / Z[ℓ]+μ) )\n    end\nend\n\n\ns = slider(0.07:.03:0.21,label=\"Slider Beta:\")\ndisplay(s)\ndisplay(observe(s));\n\n\nγ, ρ, b, c = 1, 0.1, 0.18, 1.05 # base case from the paper\nγ = 1.\nμ = 1e-4\np = [observe(s), γ, ρ, b, c, μ]\n\ntspan = (1.0, 4000)\nprob = ODEProblem(source_sink!, u₀, tspan, p)\nsol = solve(prob, DP5(), saveat=1., reltol=1e-8, abstol=1e-8)\n\nL = length(sol[1].x)\nn = length(sol[1].x[1])\nI = zeros(L, length(sol.t))\n\nfor t in 1:length(sol.t)\n  for ℓ in 1:L\n    G_nil = sol[t].x[ℓ]\n    I[ℓ, t] = sum((collect(0:(n-1)) / n) .* G_nil) / sum(G_nil)\n  end\nend\n  \nI[:, 1:3000]"
  }
]